
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;


public class NewJFrame1 extends javax.swing.JFrame {

    ServerSocket server;
    Socket so;
    BufferedReader reader;
    PrintWriter writer;
    DataInputStream read;
    DataOutputStream write;
    DH serv;
    DH clien;
    String[] dataPC, PCspliter;
    String username = " ", MyPCiP;
    Boolean DFOk=false; 
    

    public class IncomingReader implements Runnable {

        @Override
        public void run() {
            String[] dataout;
            String stream;
             try 
            {
                while (true) 
                {
                    stream = reader.readLine();
                    System.out.println(stream);
                    dataout = stream.split(":");
                    if (dataout[0].equals("PC")) 
                    {          
                        System.out.println("NAi");
                        if(dataout[2].equals(username))
                        {
                            
                            String[] sp = dataout[4].split("/");
                            MyPCiP=sp[1];
                            System.out.println("etsi mpravo");
                        }
                        if(dataout[1].equals(username))
                        {
                            
                            String[] sp = dataout[3].split("/");
                            MyPCiP=sp[1];
                            System.out.println("mpravo");
                        }
                        System.out.println(MyPCiP);
                    }
                }
            }catch(Exception ex) 
            {
            }

        }
    }

    public String setget_username(String username) {
        this.username = username;
        return username;
    }

    public String setget_IP(String MyPCiP) {
        this.MyPCiP = MyPCiP;
        return MyPCiP;
    }

    /**
     *
     * Creates new form NewJFrame1
     */
    public NewJFrame1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TextField = new javax.swing.JTextField();
        SendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutArea = new javax.swing.JTextArea();
        StartChatting = new javax.swing.JButton();
        DHBotton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        OutArea.setEditable(false);
        OutArea.setColumns(20);
        OutArea.setLineWrap(true);
        OutArea.setRows(5);
        jScrollPane1.setViewportView(OutArea);

        StartChatting.setText("Start Chat");
        StartChatting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartChattingActionPerformed(evt);
            }
        });

        DHBotton.setText("Authenticated Diffie-Hellman");
        DHBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DHBottonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(StartChatting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DHBotton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartChatting)
                    .addComponent(DHBotton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        // TODO add your handling code here:

        String nothing = "";
        if ((TextField.getText()).equals(nothing)) {
            TextField.setText("");
            TextField.requestFocus();
        } else {
            try {
                if(DFOk==true)
                {
                    username = setget_username(username);
                String go = "MESSAGE:" + username + ":" + TextField.getText();
                byte[] enc = serv.encrypt(go);
                System.out.println(DFOk);
                write.writeInt(enc.length);
                write.write(enc);
                System.out.println(go + " is coverted to: " + enc + "\n");
                }
                else
                {
                    writer.println("MESSAGE:"+username+":"+TextField.getText());
                    writer.flush(); // flushes the buffer
                }

            } catch (Exception ex) {
                System.out.println(ex);
                OutArea.append("Message was not sent. \n");
            }
            TextField.setText("");
            TextField.requestFocus();
        }

        TextField.setText("");
        TextField.requestFocus();

    }//GEN-LAST:event_SendButtonActionPerformed

    private void StartChattingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartChattingActionPerformed
        // TODO add your handling code here:

        Thread serverThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    server = new ServerSocket(8888);
                    Socket client = server.accept();
                    reader = new BufferedReader(new InputStreamReader(client.getInputStream(), StandardCharsets.UTF_8));
                    PrintWriter out = new PrintWriter(client.getOutputStream(), true);
                    if(DFOk==true)
                    {
                        serv = new DH();
                        clien = new DH();
                        read = new DataInputStream(client.getInputStream());
                        write = new DataOutputStream(client.getOutputStream());
                        
                    }  
                    String line;
                    while ((line = reader.readLine()) != null) {
                        if(DFOk==true)
                        {
                            int lines;
                            lines = read.readInt();
                            if(lines>0)
                            {
                                byte[] enc = new byte[lines];
                                read.readFully(enc, 0, enc.length);
                            
                                System.out.println(line);
                                String dec = clien.decrypt(enc);
                                System.out.println(dec);
                                System.out.println(line);
                                dataPC = dec.split(":");
                                System.out.println(dataPC[1] + ": " + dataPC[2] + "\n");
                                OutArea.append(dataPC[1] + ": " + dataPC[2] + "\n");
                                System.out.println(dec);
                                write.writeChars(dec);
                                System.out.println(dataPC[1] + ": " + dataPC[2] + "\n");
                            }
                        }
                        else
                        {
                            
                            dataPC = line.split(":");
                            System.out.println(dataPC[1] + ": " + dataPC[2] + "\n");
                            OutArea.append(dataPC[1] + ": " + dataPC[2] + "\n");
                            System.out.println(line);
                            out.println(line);
                            System.out.println(dataPC[1] + ": " + dataPC[2] + "\n");
                        }

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        Thread clientThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    MyPCiP = setget_IP(MyPCiP);
                    so = new Socket(MyPCiP, 8888);
                    BufferedReader in = new BufferedReader(new InputStreamReader(so.getInputStream()));
                    writer = new PrintWriter(so.getOutputStream(), true);
                    while (true) {
                        String printin = in.readLine();
                        if(DFOk==true)
                        {
                            read = new DataInputStream(so.getInputStream());
                            write = new DataOutputStream(so.getOutputStream());
                            int print = read.readInt();
                            byte[] decr = new byte[print];
                            read.readFully(decr, 0, decr.length);
                            String decC = clien.decrypt(decr);
                            System.out.println(printin);
                            PCspliter = decC.split(":");
                            OutArea.append(PCspliter[1] + ": " + PCspliter[2] + "\n");
                            System.out.println(decC);
                            System.out.println("ok" + PCspliter[1] + ": " + PCspliter[2] + "\n");
                        }
                        else
                        {
                            
                            PCspliter = printin.split(":");
                            OutArea.append(PCspliter[1] + ": " + PCspliter[2] + "\n");
                            System.out.println(printin);
                            System.out.println("ok" + PCspliter[1] + ": " + PCspliter[2] + "\n");
                        }
                        
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        // start server
        serverThread.start();
        try {
            // wait a bit
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            System.out.println(ex);
        }

        // start client
        clientThread.start();


    }//GEN-LAST:event_StartChattingActionPerformed

    private void DHBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DHBottonActionPerformed
        // TODO add your handling code here:
        DFOk=true;
    }//GEN-LAST:event_DHBottonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DHBotton;
    private javax.swing.JTextArea OutArea;
    private javax.swing.JButton SendButton;
    private javax.swing.JButton StartChatting;
    private javax.swing.JTextField TextField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
